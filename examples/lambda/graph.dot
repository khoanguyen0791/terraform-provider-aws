digraph {
	compound = "true"
	newrank = "true"
	subgraph "root" {
		"[root] aws_iam_role.iam_for_lambda" [label = "aws_iam_role.iam_for_lambda", shape = "box"]
		"[root] aws_lambda_function.lambda" [label = "aws_lambda_function.lambda", shape = "box"]
		"[root] data.archive_file.zip" [label = "data.archive_file.zip", shape = "box"]
		"[root] data.aws_iam_policy_document.policy" [label = "data.aws_iam_policy_document.policy", shape = "box"]
		"[root] output.lambda" [label = "output.lambda", shape = "note"]
		"[root] provider.archive" [label = "provider.archive", shape = "diamond"]
		"[root] provider.aws" [label = "provider.aws", shape = "diamond"]
		"[root] var.aws_region" [label = "var.aws_region", shape = "note"]
		"[root] aws_iam_role.iam_for_lambda" -> "[root] data.aws_iam_policy_document.policy"
		"[root] aws_lambda_function.lambda" -> "[root] aws_iam_role.iam_for_lambda"
		"[root] aws_lambda_function.lambda" -> "[root] data.archive_file.zip"
		"[root] data.archive_file.zip" -> "[root] provider.archive"
		"[root] data.aws_iam_policy_document.policy" -> "[root] provider.aws"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] output.lambda"
		"[root] output.lambda" -> "[root] aws_lambda_function.lambda"
		"[root] provider.archive (close)" -> "[root] data.archive_file.zip"
		"[root] provider.aws (close)" -> "[root] aws_lambda_function.lambda"
		"[root] provider.aws" -> "[root] var.aws_region"
		"[root] root" -> "[root] meta.count-boundary (EachMode fixup)"
		"[root] root" -> "[root] provider.archive (close)"
		"[root] root" -> "[root] provider.aws (close)"
	}
}

